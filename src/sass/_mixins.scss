@mixin stripped-list {
	margin: 0;
	padding: 0;
	list-style: none;
}

@mixin hover($descriptor: null) {

	@if $descriptor != null {
		&:hover,
		&:focus,
		&#{$descriptor} {
			@content;
		}
	} @else {
		&:hover,
		&:focus {
			@content;
		}
	}
}

@mixin focus-visible {
	@include hidden;

	&:focus {
		width: auto;
		height: auto;
		clip: auto;
	}
}

@mixin hover-color($color, $descriptor: null) {
	@include hover($descriptor) {
		color: $color;
		@content;
	}
}

@mixin hover-bg-color($bg-color, $text-color: null, $descriptor: null) {
	@include hover($descriptor){
		background-color: $bg-color;
		color: $text-color;
		@content;
	}
}

@mixin hover-underline($descriptor: null) {
	text-decoration: none;

	@include hover($descriptor) {
		text-decoration: underline;
	}
}

@mixin svg-icon-size($width: auto, $height: auto, $padding: 0) {
	display: inline-block;
	overflow: hidden;

	svg {
		display: block;
		width: $width;
		height: $height;
		padding: $padding;
	}
}

@mixin svg-icon-style($fill-color: null, $bg-color: null, $hover-fill: null, $hover-bg: null, $roundness: null) {
	background-color: $bg-color;
	color: $fill-color;

	@if $roundness { border-radius: $roundness; }

	svg { fill: currentColor; }

	@include hover {
		background-color: $hover-bg;
		color: $hover-fill;
	}
}

@mixin svg-icon(
		$width: auto,
		$height: auto,
		$padding: 0,
		$fill-color: null,
		$bg-color: null,
		$hover-fill: null,
		$hover-bg: null,
		$roundness: null
	) {
	@include svg-icon-size($width, $height, $padding);
	@include svg-icon-style($fill-color, $bg-color, $hover-fill, $hover-bg, $roundness);
}

@mixin clearfix {
	&:before, &:after {
		content: "";
		display: table;
	}

	&:after { clear: both; }
}

@mixin hidden {
	position: absolute;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	border: 0;
	overflow: hidden;
	clip: rect(0 0 0 0);
}

@mixin width-constrain($width: $site-width, $padding: null, $percent-width: 100%) {
	box-sizing: border-box;
	margin: {
		left: auto;
		right: auto;
	}
	width: $percent-width;
	max-width: $width;

	@if $padding {
		padding: {
			left: $padding;
			right: $padding;
		}
	}
}

@mixin image-replace($width: null, $height: null, $image: null) {
	@include bg-contain;
	display: block;
	overflow: hidden;
	height: $height;
	width: $width;
	max-width: 100%;
	white-space: nowrap;
	text-indent: 200%;
	font-size: .1rem;
	color: transparent;
	background: {
		position: center center;
		repeat: no-repeat;
	}

	@if $image {
		background-image: url('#{$image}');
	}
}

@mixin bg-cover{
	background: {
		repeat: no-repeat;
		position: center center;
		size: cover;
	}
}

@mixin bg-contain {
	background: {
		repeat: no-repeat;
		position: center center;
		size: contain;
	}
}

@mixin sequential-bg(
		$num,
		$name,
		$format: "png",
		$path: "/pics/",
		$bg-sizing: null,
		$descriptor: null
	) {

	@if $descriptor {
		@if $bg-sizing == cover {
			#{$descriptor} { @include bg-cover; }
		} @else if $bg-sizing == contain {
			#{$descriptor} { @include bg-contain; }
		}
	}
	@else {
		@if $bg-sizing == cover {
			@include bg-cover;
		} @else if $bg-sizing == contain {
			@include bg-contain;
		}
	}

	@for $i from 1 through $num {
		&:nth-of-type(#{$i}) #{$descriptor} { background-image: url('#{$path}#{$name}#{$i}.#{$format}'); }
	}
}

@mixin listed-bg(
		$name-list,
		$name,
		$format: "png",
		$path: "/pics/",
		$bg-sizing: null,
		$identifier: "#",
		$descriptor: null
	) {

	@if $descriptor {
		@if $bg-sizing == cover {
			#{$descriptor} { @include bg-cover; }
		} @else if $bg-sizing == contain {
			#{$descriptor} { @include bg-contain; }
		}
	}
	@else {
		@if $bg-sizing == cover {
			@include bg-cover;
		} @else if $bg-sizing == contain {
			@include bg-contain;
		}
	}

	@each $item in $name-list {
		&#{$identifier}#{$name}_#{$item} #{$descriptor} { background-image: url('#{$path}#{$name}_#{$item}.#{$format}');}
	}
}

@mixin pseudo($pseudo: "before"){
	&:#{$pseudo}{
		content: "";
		display: block;
		@content;
	}
}

@mixin pseudo-both{
	&:before, &:after{
		content: "";
		display: block;
		@content;
	}
}

@mixin mask($pseudo: "before") {
	position: relative;

	@include pseudo($pseudo) {
		position: absolute;
		@content;
	}
}

@mixin mask-fullsize($pseudo: "before") {
	@include mask($pseudo) {
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		@content;
	}
}

@mixin respond-to($media-min) {
	@media screen and (min-width: $media-min) {
		@content;
	}
}

@mixin respond-to-max($media-max) {
	@media screen and (max-width: $media-max - 1px) {
		@content;
	}
}

@mixin respond-to-min-max($media-min, $media-max) {
	@media screen and (min-width: $media-min) and (max-width: $media-max - 1px) {
		@content;
	}
}

@mixin hide-to($width) {
	@include respond-to-max($width) { display: none; }
}

@mixin hide-small { @include hide-to($vp-mid); }
@mixin hide-mid { @include hide-to($vp-large); }
@mixin hide-large { @include hide-to($vp-max); }

@mixin scale-font($small-ratio: .5, $mid-ratio: .75, $final-size: 1rem) {
	font-size: $small-ratio * $final-size;

	@include respond-to($vp-mid) { font-size: $mid-ratio * $final-size; }
	@include respond-to($vp-large) { font-size: $final-size; }
}

@function emify($target, $context: $base-font-size, $unit: rem) {
	@if $target == 0 { @return 0 }
	@return $target / $context + $unit;
}

@function sqrt($r) {
	$x0: 1;
	$x1: $x0;

	@for $i from 1 through 10 {
		$x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
		$x0: $x1;
	}

	@return $x1;
}

@mixin select-first-half-children($val: 5, $round: "down") {
	@if $round == "up" {
		&:first-child { @content; }

		@for $i from 2 through $val {
			&:nth-last-child(n+#{$i}):nth-child(-n+#{$i}) { @content; }
		}
	} @else if $round == "down" {
		&:nth-last-child(n+2):last-child { @content; }

		@for $i from 2 through $val {
			&:nth-last-child(n+#{$i + 1}):nth-child(-n+#{$i}) { @content; }
		}
	}
}

@mixin select-last-half-children($val: 5, $round: "down") {
	@if $round == "down" {
		&:first-child:last-child { @content; }

		@for $i from 2 through $val {
			&:nth-child(n+#{$i}):nth-last-child(-n+#{$i}) { @content; }
		}
	} @else if $round == "up" {
		&:nth-child(n+2):last-child { @content; }

		@for $i from 2 through $val {
			&:nth-child(n+#{$i + 1}):nth-last-child(-n+#{$i}) { @content; }
		}
	}
}

@mixin flex-all($direction: null, $justify: null, $align: null, $wrap: null, $inline: null) {
	@if $inline == true {
		display: inline-flex;
	} @else {
		display: flex;
	}

	@if $direction != null {
		flex-direction: $direction;
	}
	@if $justify != null {
		justify-content: $justify;
	}
	@if $align != null {
		align-items: $align;
	}
	@if $wrap != null {
		flex-wrap: $wrap;
	}
}